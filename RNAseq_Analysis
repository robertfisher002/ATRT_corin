#run fastqc to check adaptor contamination and read quality

#!/bin/bash -l
#$ -pe omp 4
#$ -P epigen

#run fastqc
module load fastqc
fastqc /projectnb/epigen/ATRT_RNAseq_FASTQ/*/*.fq.gz --extract -o /projectnb/epigen/Robert/ATRT/new_analysis_3_7_24/fastqc


#run STAR aligner with hg38

#!/bin/bash -l
#$ -pe omp 24
#$ -P epigen

module load star 

# Set the path to the STAR genome index (you should provide this)
GENOME_INDEX="/projectnb/epigen/Robert/hg38"

# Set the input directory containing sample replicate directories
INPUT_DIR="/projectnb/epigen/ATRT_RNAseq_FASTQ"

# Set the output directory for BAM files
OUTPUT_DIR="/projectnb/epigen/Robert/ATRT/BAM"

# Loop through subdirectories (sample replicates)
for sample_dir in ${INPUT_DIR}/*; do
  if [ -d "$sample_dir" ]; then
    # Get the sample replicate name (directory name)
    sample_name=$(basename "$sample_dir")

    # Find read files in the sample replicate subdirectory
    read1_file="$(find "$sample_dir" -type f -name "*_1.fq.gz" | head -n 1)"
    read2_file="$(find "$sample_dir" -type f -name "*_2.fq.gz" | head -n 1)"

    if [ -n "$read1_file" ] && [ -n "$read2_file" ]; then
      # Run STAR to convert FASTQ to BAM
      STAR \
        --runThreadN 4 \
	--readFilesCommand zcat \
        --genomeDir $GENOME_INDEX \
        --readFilesIn $read1_file $read2_file \
        --outFileNamePrefix ${OUTPUT_DIR}/${sample_name}_ \
        --outSAMtype BAM SortedByCoordinate

      echo "Converted ${sample_name} to BAM."
    else
      echo "ERROR: Read files not found in ${sample_dir}" >&2
    fi
  fi
done

echo "Conversion complete."



#Run feature counts BT37
#!/bin/bash -l
#$ -pe omp 4
#$ -P epigen

module load subread

# Directory containing .bam files
bam_directory="/projectnb/epigen/Robert/ATRT/BAM"

# Full path to annotation file
annotation_file="/projectnb/epigen/Robert/hg38/gencode.v44.annotation.gtf"

# Output directory for featureCounts results
output_directory="/projectnb/epigen/Robert/ATRT/Counts"

featureCounts -a "$annotation_file" -o "$output_directory/BT37_counts.txt" --largestOverlap -t exon -g gene_id -p --countReadPairs -Q 10 "$bam_directory"/BT37_D_D1_1_Aligned.sortedByCoord.out.bam "$bam_directory"/BT37_D_D1_2_Aligned.sortedByCoord.out.bam "$bam_directory"/BT37_D_D1_3_Aligned.sortedByCoord.out.bam "$bam_directory"/BT37_C_D1_1_Aligned.sortedByCoord.out.bam "$bam_directory"/BT37_C_D1_2_Aligned.sortedByCoord.out.bam "$bam_directory"/BT37_C_D1_3_Aligned.sortedByCoord.out.bam 


#Run feature counts CHLA06
#!/bin/bash -l
#$ -pe omp 4
#$ -P epigen

module load subread

# Directory containing .bam files
bam_directory="/projectnb/epigen/Robert/ATRT/BAM"

# Full path to annotation file
annotation_file="/projectnb/epigen/Robert/hg38/gencode.v44.annotation.gtf"

# Output directory for featureCounts results
output_directory="/projectnb/epigen/Robert/ATRT/Counts"

featureCounts -a "$annotation_file" -o "$output_directory/CHO6_counts.txt" --largestOverlap -t exon -g gene_id -p --countReadPairs -Q 10 "$bam_directory"/CHO6_D_D1_1_Aligned.sortedByCoord.out.bam "$bam_directory"/CHO6_D_D1_2_Aligned.sortedByCoord.out.bam "$bam_directory"/CHO6_D_D1_3_Aligned.sortedByCoord.out.bam "$bam_directory"/CHO6_C_D1_1_Aligned.sortedByCoord.out.bam "$bam_directory"/CHO6_C_D1_2_Aligned.sortedByCoord.out.bam "$bam_directory"/CHO6_C_D1_3_Aligned.sortedByCoord.out.bam 




#Run DESeq

#import in featurecounts 
BT37_counts <- read.delim("/projectnb/epigen/Robert/ATRT/Counts/BT37_counts.txt", header =F, stringsAsFactors=FALSE)

#remove first row and make the next row the column names
BT37_counts <- BT37_counts[-1,]
colnames(BT37_counts) <- BT37_counts[1,]
BT37_counts <- BT37_counts[-1,]

#simplify column names and order them 
BT37_counts <- BT37_counts %>% dplyr::rename(BT37_DMSO_1 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_D_D1_1_Aligned.sortedByCoord.out.bam", BT37_DMSO_2 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_D_D1_2_Aligned.sortedByCoord.out.bam", BT37_DMSO_3 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_D_D1_3_Aligned.sortedByCoord.out.bam", BT37_Corin_1 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_C_D1_1_Aligned.sortedByCoord.out.bam", BT37_Corin_2 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_C_D1_2_Aligned.sortedByCoord.out.bam", BT37_Corin_3 = "/projectnb/epigen/Robert/ATRT/BAM/BT37_C_D1_3_Aligned.sortedByCoord.out.bam") %>% dplyr::select(Geneid,BT37_DMSO_1,BT37_DMSO_2,BT37_DMSO_3, BT37_Corin_1,BT37_Corin_2, BT37_Corin_3) %>% textshape::column_to_rownames("Geneid")

#convert to matrix
BT37_counts_DESeq<- data.matrix(BT37_counts)

#make conditions table input for DESeq
sample_ID <- c("BT37_DMSO_1", "BT37_DMSO_2", "BT37_DMSO_3", "BT37_Corin_1", "BT37_Corin_2", "BT37_Corin_3")
condition <- c("DMSO", "DMSO", "DMSO", "Corin", "Corin", "Corin")
type <- c("paired", "paired", "paired", "paired", "paired", "paired")
BT37_conditions <- data.frame(sample_ID = sample_ID, condition = condition, type = type)
rownames(BT37_conditions) <- BT37_conditions[,1]
BT37_conditions <- BT37_conditions[,-1]

#Ensure rownames of conditions match order of column names of count matrix
all(rownames(BT37_conditions) == colnames(BT37_counts))

#Set up DEseq matrix with design set to compare between DMSO and corin
dds_BT37 = DESeqDataSetFromMatrix(BT37_counts_DESeq, BT37_conditions, design = ~ condition)

#Filter out genes that have low read counts (although not a necessary step for DESeq, running without doing so results in many pseudogenes and ncRNAs that have 1 read count in some samples and thosuands in others)
dds_BT37 <- estimateSizeFactors(dds_BT37)
idx_BT37 <- rowSums( counts(dds_BT37, normalized=TRUE) >= 5 ) >= 6
dds_BT37 <- dds_BT37[idx_BT37,]

#Run DESeq
dds_BT37 <- DESeq(dds_BT37)

#Get results
res_BT37 <- results(dds_BT37, contrast=c("condition","Corin","DMSO"))






